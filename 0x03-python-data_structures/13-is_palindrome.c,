#include <stdio.h>
#include <stdlib.h>

/* Definition for singly-linked list */
typedef struct ListNode {
    int val;
    struct ListNode* next;
} listint_t;

int is_palindrome(listint_t** head) {
    if (*head == NULL || (*head)->next == NULL)
        return 1;

    // Find the middle of the linked list
    listint_t* slow = *head;
    listint_t* fast = *head;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    // Reverse the second half of the linked list
    listint_t* prev = NULL;
    listint_t* curr = slow;
    listint_t* next;

    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }

    // Compare the values of the first and second half of the linked list
    listint_t* firstHalf = *head;
    listint_t* secondHalf = prev;

    while (secondHalf != NULL) {
        if (firstHalf->val != secondHalf->val)
            return 0;
        firstHalf = firstHalf->next;
        secondHalf = secondHalf->next;
    }

    return 1;
}

int main() {
    // Example usage
    listint_t* head = malloc(sizeof(listint_t));
    head->val = 1;

    listint_t* node1 = malloc(sizeof(listint_t));
    node1->val = 2;

    listint_t* node2 = malloc(sizeof(listint_t));
    node2->val = 3;

    listint_t* node3 = malloc(sizeof(listint_t));
    node3->val = 2;

    listint_t* node4 = malloc(sizeof(listint_t));
    node4->val = 1;

    head->next = node1;
    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = NULL;

    int result = is_palindrome(&head);
    printf("Is the linked list a palindrome? %s\n", result ? "Yes" : "No");

    return 0;
}

